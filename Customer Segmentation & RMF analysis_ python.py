# -*- coding: utf-8 -*-
"""Project_ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LxL_gL-q5dEiOFP8ji1TTcsh2SFBByE4
"""

import pandas as pd
import datetime as dt
import seaborn as sns
import matplotlib.pyplot as plt
#%matplotlib inline

"""**Import Sample orders data containing transactions**"""

dataset = pd.read_csv('sample-orders.csv',encoding = 'unicode_escape')
dataset.head()

"""# Create the RFM

Setting this date to the current day and extracting all orders until yesterday
"""

rec = dt.datetime(2020, 9, 25)

"""Make the date_placed column datetime"""

dataset['order_date'] = pd.to_datetime(dataset['order_date'])

dataset.head()

"""Create the RFM Table"""

RMF_Table = dataset.groupby('customer').agg({'order_date': lambda x: (rec - x.max()).days, # Recency
                                        'order_id': lambda x: len(x),      # Frequency
                                        'grand_total': lambda x: x.sum()}) # Monetary Value

RMF_Table['order_date'] = RMF_Table['order_date'].astype(int)
RMF_Table.rename(columns={'order_date': 'recency', 
                         'order_id': 'frequency', 
                         'grand_total': 'monetary_value'}, inplace=True)

"""RMF TABLE"""

RMF_Table.head()

"""#Determining RFM Quartiles"""

quantiles = RMF_Table.quantile(q=[0.25,0.5,0.75])

quantiles

"""Send quantiles to a dictionary"""

quantiles = quantiles.to_dict()

quantiles

"""#Creating the RFM segmentation table"""

RMF_Segmentation = RMF_Table

"""created a class for the RFM segmentation where: 4 is best and 1 is bad

---
"""

# Arguments (x = value, p = recency, monetary_value, frequency, k = quartiles dict)
def RmfClass(x,p,d):
    if x <= d[p][0.25]:
        return 1
    elif x <= d[p][0.50]:
        return 2
    elif x <= d[p][0.75]: 
        return 3
    else:
        return 4

RMF_Segmentation['R'] = RMF_Segmentation['recency'].apply(RmfClass, args=('recency',quantiles,))
RMF_Segmentation['F'] = RMF_Segmentation['frequency'].apply(RmfClass, args=('frequency',quantiles,))
RMF_Segmentation['M'] = RMF_Segmentation['monetary_value'].apply(RmfClass, args=('monetary_value',quantiles,))

RMF_Segmentation['RFMClass'] = RMF_Segmentation.R.map(str) \
                            + RMF_Segmentation.F.map(str) \
                            + RMF_Segmentation.M.map(str)

RMF_Segmentation.head()

"""# Plot RFM distributions"""

plt.figure(figsize=(12,10))
# Plot distribution of R
plt.subplot(3, 1, 1); sns.distplot(RMF_Segmentation['recency'])
# Plot distribution of F
plt.subplot(3, 1, 2); sns.distplot(RMF_Segmentation['frequency'])
# Plot distribution of M
plt.subplot(3, 1, 3); sns.distplot(RMF_Segmentation['monetary_value'])
# Show the plot
plt.show()

"""calculating sum of R F M values"""

RMF_Segmentation['RFM_Score'] = RMF_Segmentation[['R','F','M']].sum(axis=1)
print(RMF_Segmentation['RFM_Score'].head())

"""Assigning Label to each customer according to RFM_Score"""

def rfm_label(df):
    if df['RFM_Score'] >= 9:
        return 'Can\'t Loose Them'
    elif ((df['RFM_Score'] >= 8) and (df['RFM_Score'] < 9)):
        return 'Champions'
    elif ((df['RFM_Score'] >= 7) and (df['RFM_Score'] < 8)):
        return 'Loyal'
    elif ((df['RFM_Score'] >= 6) and (df['RFM_Score'] < 7)):
        return 'Potential'
    elif ((df['RFM_Score'] >= 5) and (df['RFM_Score'] < 6)):
        return 'Promising'
    elif ((df['RFM_Score'] >= 4) and (df['RFM_Score'] < 5)):
        return 'Needs Attention'
    else:
        return 'Require Activation'

"""Create a new variable RFM_Level"""

RMF_Segmentation['RFM_Label'] = RMF_Segmentation.apply(rfm_level, axis=1)

"""Print the header with top 5 rows to the console"""

RMF_Segmentation.head()

"""#Plotting Them According To RFM_Label"""

sns.countplot(y='RFM_Label',data=RMF_Segmentation)

"""*Grouping them By labels*"""

rfm_level_agg = RMF_Segmentation.groupby('RFM_Label').agg({
    'recency': 'mean',
    'frequency': 'mean',
    'monetary_value': ['mean', 'count']
}).round(1)

"""Print the aggregated dataset"""

print(rfm_level_agg)

RMF_Segmentation['RFM_Label'] = RMF_Segmentation['R'].map(str) + RMF_Segmentation['F'].map(str)

sns.set_style('whitegrid')
sns.FacetGrid(RMF_Segmentation,hue='RFM_Label',size=7)\
.map(plt.scatter,'recency','monetary_value')\
.add_legend();

plt.show()

